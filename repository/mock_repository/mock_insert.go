// Code generated by MockGen. DO NOT EDIT.
// Source: repository/insert.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
        reflect "reflect"

        repository "github.com/go-unit-test/repository"
        gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
        ctrl     *gomock.Controller
        recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
        mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
        mock := &MockUserService{ctrl: ctrl}
        mock.recorder = &MockUserServiceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
        return m.recorder
}

// InsertUser mocks base method.
func (m *MockUserService) InsertUser(user repository.User) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "InsertUser", user)
        ret0, _ := ret[0].(error)
        return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserServiceMockRecorder) InsertUser(user interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserService)(nil).InsertUser), user)
}
